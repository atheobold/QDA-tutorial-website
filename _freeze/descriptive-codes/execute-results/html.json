{
  "hash": "259d7416d1330eebb14c73d1ad893447",
  "result": {
    "markdown": "---\ntitle: \"Step 2: Descriptive Codes\"\npage-layout: full\nreference-location: margin\ncitation-location: margin\nbibliography: ref-1.bib\nexecute: \n  echo: false\n---\n\n\n\n\nThe second step in the qualitative analysis is creating qualitative codes for each unit of analysis (UOA).\n\nThe process of coding in qualitative research, where a researcher makes notes next to each UOA that are potentially relevant to addressing the research question. Codes act as labels, assigning \"symbolic meaning\" to each UOA [@miles]. In our context, each line of R code is a UOA, which is why we are \"coding code.\"\n\nThe initial qualitative codes assigned to the units of analysis can be thought of as the \"first cycle codes.\" There are over 25 different methods for creating first cycle codes, each with a particular focus and purpose. In our paper, we discuss two specific methods of coding we believe are most relevant to investigating computing code: descriptive coding and in vivo coding.\n\nFor this research, I chose to use descriptive codes as I sought to *describe* the computing skills students were using in their research project. With in vivo coding, these descriptions would be required to take on the voice (code) of each student, which I felt constrained the possible descriptions available to me.\n\n----\n\n## Student A -- Descriptive Codes\n\nIf you are interested in seeing the original R script file from Student A, \nyou can find that [here](data/studentA_code.qmd). \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-4566715203c53e70fd9d\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4566715203c53e70fd9d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\"],[\"str(PADataNoOutlier)\",\"str(PADataNoOutlierMultMeasure)\",\"names(RPMA2Growth)\",\"#upper anterior measurement Linear model\",\"linearAnterior &lt;- lm(PADataNoOutlier$Lipid ~ PADataNoOutlier$PSUA)\",\"summary(linearAnterior)\",\"linearAnterior\",\"with(PADataNoOutlier, plot(Lipid ~ PSUA, las = 1, col = ifelse(PADataNoOutlier$`Fork Length` &lt;  280, \\\"red\\\", \\\"black\\\")))\",\"abline(linearAnterior)\",\"#Exponential function\",\"expAnterior &lt;- lm(PADataNoOutlier$Lipid ~ log(PADataNoOutlier$PSUA))\",\"summary (expAnterior)\",\"expAnterior\",\"with(PADataNoOutlier, plot(Lipid ~ log(PSUA), las = 1, col = ifelse(PADataNoOutlier$`Fork Length` &lt;  260, \\\"red\\\", \\\"black\\\"))) col = ifelse(PADataNoOutlier$`Fork Length` &lt;  260, \\\"red\\\", \\\"black\\\")))\",\"abline(expAnterior)\",\"plot(expAnterior)\",\"early &lt;- subset(RPMA2Growth, StockYear &lt; 2006)\",\"mid &lt;- subset(RPMA2Growth, StockYear &lt; 2014 &amp; StockYear &gt; 2003)\",\"RPMA2GrowthSub &lt;- transform(RPMA2Growth, Age = as.integer(Age))\",\"Early &lt;- subset(RPMA2GrowthSub, StockYear &lt; 2004)\",\"Mid &lt;- subset(RPMA2GrowthSub, StockYear &lt; 2018 &amp; StockYear &gt; 2005)\",\"EarlyWeightAge &lt;- ddply(Early, ~Age, summarise, meanWE=mean(Weight, na.rm = T))\",\"EarlyLengthAge &lt;- ddply(Early, ~Age, summarise, meanLE = mean(ForkLength, na.rm = T))\",\"MidLengthAge &lt;- ddply(Mid, ~Age, summarise, meanLM = mean(ForkLength, na.rm = T))\",\"WeightChange &lt;- rep(NA, 9)\",\"library(plyr)\",\"WeightAge &lt;- ddply(RPMA2GrowthSub, ~Age, summarise, meanW=mean(Weight, na.rm = T))\",\"LengthAge &lt;- ddply(RPMA2GrowthSub, ~Age, summarise, meanL=mean(ForkLength, na.rm = T))\",\"plot(EarlyLengthAge$meanLE ~ EarlyLengthAge$Age, las = 1, ylab = \\\"Fork Length (mm)\\\", xlab = \\\"Age\\\")\",\"lines(EarlyLengthAge$meanLE ~ EarlyLengthAge$Age)\",\"points(MidLengthAge$meanLM ~ MidLengthAge$Age, col = \\\"red\\\")\",\"lines(MidLengthAge$meanLM ~ MidLengthAge$Age, col = \\\"red\\\")\",\"legend(15, 600, legend = c(\\\"1998-2003\\\", \\\"2006-2017\\\"), col = c(\\\"black\\\", \\\"red\\\"), lty = 1:1, cex = 0.8)\",\"#Tanner's code/help\",\"WeightChange &lt;- rep(NA, 9)\",\"library(plyr)\",\"WeightAge &lt;- ddply(RPMA2GrowthSub, ~Age, summarise, meanW=mean(Weight, na.rm = T))\",\"LengthAge &lt;- ddply(RPMA2GrowthSub, ~Age, summarise, meanL=mean(ForkLength, na.rm = T))\",\"plot(WeightAge$meanW ~ WeightAge$Age)\",\"plot(LengthAge$mean ~ LengthAge$Age)\",\"WeightChange\",\"Weight1 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 1], na.rm = TRUE)\",\"Weight1\",\"Length1 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 1], na.rm  = TRUE)\",\"Weight2 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 2], na.rm = TRUE)\",\"Length2 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 2], na.rm  = TRUE)\",\"Weight3 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 3], na.rm = TRUE)\",\"Length3 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 3], na.rm  = TRUE)\",\"Weight4 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 4], na.rm = TRUE)\",\"Length4 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 4], na.rm  = TRUE)\",\"Weight5 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 5], na.rm = TRUE)\",\"Length5 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 5], na.rm  = TRUE)\",\"Weight6 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 6], na.rm = TRUE)\",\"Length6 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 6], na.rm  = TRUE)\",\"Weight7 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 7], na.rm = TRUE)\",\"Length7 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 7], na.rm  = TRUE)\",\"Weight8 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 8], na.rm = TRUE)\",\"Length8 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 8], na.rm  = TRUE)\",\"Weight9 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 9], na.rm = TRUE)\",\"Length9 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 9], na.rm  = TRUE)\",\"x &lt;- data.frame(\\\"Age\\\" = 1:9, \\\"Growth\\\" = Weight1, Weight2, Weight3, Weight4, Weight5, Weight6, Weight7, Weight8, Weight9)\"],[\"inspect data\",\"inspect data\",\"inspect data\",\"code comment\",\"fit a linear model, uses $ to select columns from dataframe\",\"views summary of lm object\",\"inspects lm object\",\"uses with() to attach dataframe, creates scatterplot, colors points based on conditional statement, rotates y-axis ticks\",\"adds linear trendline\",\"code comment\",\"fit a linear model, uses $ to select columns from dataframe, uses function to mutate variable\",\"views summary of lm object\",\"inspects lm object\",\"uses with() to attach dataframe, creates scatterplot, colors points based on conditional statement, rotates y-axis ticks\",\"adds linear trendline\",\"visualizes model diagnostics for linear model\",\"filter data, relational statement, create new dataframe\",\"filter data, relational statement, joined by logical (&amp;), create new dataframe\",\"mutate existing variable to integer, create new dataframe\",\"filter data, relational statement, create new dataframe\",\"filter data, relational statement, joined by logical (&amp;), create new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"create variable\",\"load package\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"creates scatterplot, selects variables using $, specifies x- and y-axis labels, rotates y-axis ticks\",\"adds segments between lines, selects variables using $\",\"adds additional points to plot, selects variables using $, colors points red\",\"adds segments between lines, selects variables using $, colors segments red\",\"specify position for legend, declare text to display, colors to display with text, types of lines to display, thickness of lines displayed\",\"comment on where the code was acquired\",\"create new variable\",\"load package\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"creates scatterplot, selects variables using $\",\"creates scatterplot, selects variables using $\",\"inspect dataframe\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"inspect object\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"create new dataframe, new columns, column containing data summaries\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## Student B -- Descriptive Codes\n\nIf you are interested in seeing the original R script file from Student A, \nyou can find that [here](data/studentB_code.qmd). \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-40a5a30789d2844a7ddf\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-40a5a30789d2844a7ddf\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\"],[\"rm(list = ls())\",\"source(\\\"./Gas_Functions.R\\\")\",\"# Load data ####\",\"load(\\\"***REDACTED***/gas\\\")\",\"load(\\\"***REDACTED***/carboys\\\")\",\"gas &lt;- gas[!(substr(gas$sampleID,3,3) %in% c(\\\"b\\\",\\\"c\\\")), ]\",\"gas$days &lt;- as.numeric(gas$minutesSinceAmendment/(24*60))\",\"# Calculate molar fraction of N15-N2\",\"RstN &lt;- 0.003678\",\"R &lt;- ((gas$delN2/1000)+1)*RstN\",\"gas$N15_MF &lt;- R/(1+R)\",\"# Calculate concentration of N15-N14 N2 relative to Argon\",\"gas$N15_N2_Ar &lt;- (gas$N15_MF * gas$N2Ar)*(40/28.014)\",\"#mol N15-N2 per mol Ar\",\"# Function to calculate likelihood of parameters given data ####\",\"nmle &lt;- function(P, t, y, N15_NO3_O){   yhat &lt;- N15_NO3_O * (1 - exp(-P[1]*t)) - sum(dnorm(y, yhat, exp(P[2]), log = T)) }\",\"#### Carboy D ####\",\"# Make vectors for time and N15-N2 observations\",\"timeD &lt;- (subset(gas, gas$carboy == \\\"D\\\"))$days\",\"obsD &lt;- subset(gas, gas$carboy == \\\"D\\\")$N15_N2_Ar\",\"timeD &lt;- timeD[!is.na(obsD)]\",\"obsD &lt;- obsD[!is.na(obsD)]\",\"# Subtract off N15-N2 initially present in sample and set tracer N15-N2 to 0 at t=0\",\"obsD &lt;- obsD - obsD[1]\",\"# Estimate Initial concentration of N15-NO3 relative to Ar\",\"N15_NO3_O_D &lt;- 40*((carboys[carboys$CarboyID == \\\"D\\\",]$EstN15NO3) + (0.7*RstN/(1 +RstN)))/(subset(gas, gas$carboy == \\\"D\\\")$Ar[1])\",\"# Estimate fraction of labeled nitrate that gets denitrified\",\"fracDenD = max(obsD)/N15_NO3_O_D\",\"# Search for best parameters\",\"mle.outD &lt;- nlm(f = nmle, p = c(1,0.01), t = timeD, y = obsD, N15_NO3_O = N15_NO3_O_D*fracDenD)\",\"ktotEst &lt;- mle.outD$estimate[1]\",\"kuEst &lt;- ktotEst*(1-fracDenD )\",\"kDenEst &lt;- ktotEst*fracDenD\",\"#per day\",\"sigmaEst &lt;- exp(mle.outD$estimate[2])\",\"# Plot model with data\",\"quartz(width = 4.5, height = 4)\",\"par(mar = c(3.5, 4, 3, 1))\",\"predictionTimesD &lt;- seq(0,max(timeD), length.out = 100)\",\"predictionD &lt;- fracDenD*N15_NO3_O_D*(1-exp(-ktotEst*predictionTimesD))\",\"plot(x = predictionTimesD, y = predictionD, col = \\\"blue\\\", type = \\\"l\\\", xlab = \\\"\\\" , ylab = \\\"\\\", ylim = c(0,0.08), main = \\\"Mesocosm D\\\", las = 1)\",\"points(timeD, obsD, pch = 19)\",\"title(ylab = expression(paste(\\\"Tracer \\\"^15, N[2],\\\":Ar\\\")), line = 2.5, font.sub = 2)\",\"title(xlab = \\\"Time (days)\\\", line = 2,font.sub =2)\",\"legend(\\\"bottomright\\\", legend = c(\\\"Modeled\\\", \\\"Measured\\\"), lty = c(\\\"solid\\\", NA), col = c(\\\"blue\\\", \\\"black\\\"), pch = c(NA, 19))\",\"# Calculate confidence interval\",\"# Make matrix of parameter combinations\",\"numRows &lt;- 1000\",\"kTotMin &lt;- 2\",\"kTotMax &lt;- 60\",\"pMat &lt;- matrix(data = c(seq(kTotMin, kTotMax, length.out = numRows), rep(log(sigmaEst), times = numRows)), nrow = numRows)\",\"likelihoods &lt;- apply(X = pMat, MARGIN = 1, FUN = nmle, t = timeD,  y = obsD, N15_NO3_O = fracDenD*(N15_NO3_O_D))\",\"mlle &lt;- -min(likelihoods)\",\"mlleIndex &lt;- which.min(likelihoods)\",\"mlleCI &lt;- mlle - 1.96\",\"lowerCIBound &lt;- pMat[1:mlleIndex,1][which.min(abs(mlleCI+likelihoods[1:mlleIndex]))]\",\"upperCIBound &lt;- pMat[mlleIndex:length(likelihoods),1][which.min(abs(mlleCI+likelihoods[mlleIndex:length(likelihoods)]))]\",\"CI &lt;- c(lowerCIBound, upperCIBound)\",\"print(CI)\",\"lowerCIBoundkDen &lt;- lowerCIBound*fracDenD\",\"upperCIBoundkDen &lt;- upperCIBound*fracDenD\",\"# Plot likelihoods with confidence intervals\",\"quartz(width = 4.5, height = 4)\",\"plot(x = seq(kTotMin,kTotMax, length.out = numRows), y = -likelihoods, type = \\\"l\\\", xlab = \\\"ktot (per day)\\\", ylab = \\\"log(Likelihood)\\\", las = 1)\",\"abline(v = lowerCIBound, lty = 2, col = \\\"blue\\\")\",\"abline(v = upperCIBound, lty = 2, col = \\\"blue\\\")\"],[\"cleaning working environment\",\"loading functions written in another R script\",\"code comment\",\"loading data, specifying full path to access data\",\"loading data, specifying full path to access data\",\"filtering rows, using brackets, relational statement (%in%), logical (!)\",\"create new column, mutate existing column, change data type\",\"comment on code below\",\"create new variable\",\"create new variable, by mutating existing column and using previously defined variable \",\"creating new column, using previously defined variable \",\"comment on code below\",\"create new variable, by mutating existing variables\",\"comment on units\",\"comment on code below\",\"user-defined function which takes multiple inputs, filters a vector using brackets, calculates values based on variables and function output\",\"comment on new section of code\",\"comment on code below\",\"create new object, filter rows, using subset(), relational statement (==), select column using $\",\"create a new object, filter rows, using subset(), relational statement (==), select column using $\",\"create a new object, filter elements of object using brackets, relational statement (is.na) and logical (!) \",\"create a new object, filter elements of object using brackets, relational statement (is.na) and logical (!)\",\"comment on action taken in code below\",\"mutate existing object, filter elements of object using brackets\",\"comment on action taken in code below\",\"filters rows (using brackets) and a relational statement (==), selects column (with $), then filters rows using subset() and a relational statement (==), selects column from filtered data and pulls out index of column with []\",\"comment on action of code below\",\"create new variable, based on previously defined variable\",\"comment on action for code below\",\"implementing base R function, using: user-defined function (nmle), naming function arguments, imputing previously defined variables (e.g. timeE), imputing hard coded values (e.g. c(1,0.01), saving function output as new object\",\"pulling off named function output using $, filtering elements using brackets\",\"create new variable, mutate previously defined variable\",\"create new variable, mutate previously defined variables\",\"comment on units\",\"create new variable, pull off named function output using $, filter elements using brackets\",\"comment on code below\",\"starts graphics driver from macOS system\",\"splitting the plotting window\",\"creating new object, using values of previously defined variable, named arguments\",\"creating new object, using values of previously defined variables\",\"scatterplot of previously defined objects, specify color of points, type of line, axis labels, plot title, y-axis limits, orientation of axis ticks\",\"adding points to plot, based on previously defined objects, specifying plotting character/shape\",\"adding title to plot, using expression() for exponents and subscripts, specifies placement of title (relative to plot edge), specifying font size for subtitle\",\"adding title to plot, specifies placement of title, specifying font size for subtitle\",\"adds legend to plot, location of lengend, labels for legend, line types in legend, colors in legend, plotting characters in legend\",\"comment on code below\",\"comment on action taken in code below\",\"create new variable\",\"create new variable\",\"create new variable\",\"create new matrix object using previously defined variables\",\"creating a new dataframe, applying function over rows of existing dataframe, declare additional function arguments, name all arguments  \",\"create new variable, data summary (min)\",\"create new variable, data summary (location of minimum – index)\",\"create new variable, using existing variable\",\"create a new variable by filtering existing dataframe using brackets and previously defined variable, selecting a column with [] and hardcoded number, filtering elements using [] and index (output from additional fitering)\",\"create a new variable by filtering existing dataframe using brackets and previously defined variable, selecting a column with [] and hardcoded number, filtering elements using [] and index (output from additional fitering)\",\"create new vector\",\"inspect object\",\"create new object based on existing variables\",\"create new object based on existing variables\",\"comment on what code below does\",\"starts graphics driver from macOS system\",\"scatterplot of a locally defined variable and one previously defined variable, specify linetype, declare axis labels, change orientation of axis ticks\",\"add vertical line to plot using previously defined variable\",\"add vertical line to plot using previously defined variable\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.22/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}