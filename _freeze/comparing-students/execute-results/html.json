{
  "hash": "8a449d58212988c3ccac8193d9047aac",
  "result": {
    "markdown": "---\ntitle: \"Optional: Comparing Across Students\"\npage-layout: full\nreference-location: margin\ncitation-location: margin\nbibliography: ref-1.bib\nexecute: \n  echo: false\n---\n\n\n\n\n## Workflow\n\n::: {.column-margin}\n![](images/workflow.png)\n:::\n\nOne of the most substantial differences between Student A's code and Student B's\nwas found in the theme of workflow. In Student A's code, there was no obvious\nstructure to their workflow. Sporadic code comments were used to describe what \nthe code below was for, yet it was also unclear what some comments corresponded\nto (e.g., `#Tanner's code/help`). Student A, on the other hand, has a nearly \nmeticulous workflow, starting with sourcing in common functions, then loading\nin the data, then cleaning the data, and finally analyzing the data. Moreover, \nStudent A used code comments to generate \"sections\" of code, describing the \noverall context of the code (e.g., `#### Carboy D ####`), and \"subsections\" of\ncode, describing the process being taken (e.g., `# Estimate Initial\nconcentration of N15-NO3 relative to Ar`). \n\nInterestingly, there were almost no instances of code in Student B's analysis\nwhere an object was inspected. Alternatively, in Student A's code there were\nfrequent instances where an object was inspected (e.g., \n`summary(linearAnterior)`, `WeightChange`). \n\n</br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-da0e091783f9e4445436\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-da0e091783f9e4445436\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\"],[\"str(PADataNoOutlier)\",\"str(PADataNoOutlierMultMeasure)\",\"names(RPMA2Growth)\",\"#upper anterior measurement Linear model\",\"summary(linearAnterior)\",\"linearAnterior\",\"#Exponential function\",\"summary (expAnterior)\",\"expAnterior\",\"#Tanner's code/help\",\"source(\\\"./Gas_Functions.R\\\")\",\"# Load data ####\",\"# Calculate molar fraction of N15-N2\",\"# Calculate concentration of N15-N14 N2 relative to Argon\",\"#mol N15-N2 per mol Ar\",\"# Function to calculate likelihood of parameters given data ####\",\"#### Carboy D ####\",\"# Make vectors for time and N15-N2 observations\",\"# Subtract off N15-N2 initially present in sample and set tracer N15-N2 to 0 at t=0\",\"# Estimate Initial concentration of N15-NO3 relative to Ar\",\"# Estimate fraction of labeled nitrate that gets denitrified\",\"# Search for best parameters\",\"#per day\",\"# Plot model with data\",\"# Calculate confidence interval\",\"# Make matrix of parameter combinations\",\"print(CI)\",\"# Plot likelihoods with confidence intervals\"],[\"inspect data\",\"inspect data\",\"inspect data\",\"code comment\",\"views summary of lm object\",\"inspects lm object\",\"code comment\",\"views summary of lm object\",\"inspects lm object\",\"comment on where the code was acquired\",\"loading functions written in another R script\",\"code comment\",\"comment on code below\",\"comment on code below\",\"comment on units\",\"comment on code below\",\"comment on new section of code\",\"comment on code below\",\"comment on action taken in code below\",\"comment on action taken in code below\",\"comment on action of code below\",\"comment on action for code below\",\"comment on units\",\"comment on code below\",\"comment on code below\",\"comment on action taken in code below\",\"inspect object\",\"comment on what code below does\"],[\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n      <th>Student<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Readability \n\n::: {.column-margin}\n![](images/read.png)\n:::\n\nAside from student's use of code comments for organizing their workflow, I \nnoticed differences in their use of whitespace, returns for long lines of code, \nand named arguments. Whereas Student A would consistently use whitespace \nsurrounding arithmetic operators (e.g., `+`, `-`, `=`. `*`, ), relational\noperators (e.g., `==`, `<`, `>`) operators, and commas, Student B's use of\nwhitespace was again sporadic. Most frequently, Student A's statements would have\nsome combination of present and absent whitespace \n(e.g., `Early <- subset(RPMA2GrowthSub, StockYear<2004)`). \n\nSimilar to the use of whitespace, differences were found in how each student\nhandled long lines of code. In all but a few instances of Student B's code, she\nused returns to break lines longer than 80 characters. Student A, however, \nnever used returns to break long lines of code. When paired with a lack of \nwhitespace, these long lines made Student A's code difficult to interpret (as\ndemonstrated in the code below). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(PADataNoOutlier, plot(Lipid~log(PSUA), las = 1, col = ifelse(PADataNoOutlier$`Fork Length`<260,\"red\",\"black\")))\n```\n:::\n\n\nInterestingly, Student B would habitually use named arguments for functions she\nemployed. Paired with her use of whitespace and returns, these named arguments\nmade her code more easily readable and digestible. Aside from the code used \nto produce visualizations (e.g., `col = `, `las = `), Student A's code, however,\ndid not contain references to named arguments. Combined with a sporadic use\nof whitespace and returns, this lack of named arguments made Student A's code\ndifficult to read and interpret the processes being enacted. \n\nBelow are two examples of code which contrast all three of these \ninstances of \"readability\": \n\n**Student A**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEarlyLengthAge <- ddply(Early, ~Age, summarise, meanLE=mean(ForkLength, na.rm = T))\n```\n:::\n\n\n**Student B**\n\n::: {.cell}\n\n```{.r .cell-code}\nlikelihoods <- apply(X = pMat,\n                     MARGIN = 1, \n                     FUN = nmle, \n                     t = timeD, \n                     y = obsD,  \n                     N15_NO3_O = fracDenD*(N15_NO3_O_D)\n)\n```\n:::\n\n\n\n### Reproducibility\n\n::: {.column-margin}\n![](images/reproduce.png)\n:::\n\nAs mentioned previously, at the beginning of Student B's code were explicit \nreferences to the data being used for analysis. Specifically, Student B used the\n`load()` function to source her data. Rather than writing statements of code, \nStudent A instead used the RStudio GUI to import her data into her workspace. \nThus, in Student A's code there are no lines of code which load in the data\nshe worked with. Not only does this make Student A's code not reproducible, but\nreferences to dataframes named `PADataNoOutlier` become increasingly concerning. \nWhen asked about how the \"outliers\" were removed from the `PADataNoOutlier` \ndataset, Student A stated that she had used Excel to clean the data and then \nloaded the cleaned data into RStudio (using the GUI).\n\nStudent A's code had additional statements which raise concerns for \nreproducibilty. Specifically, there are statements which call on the `ddply()`\nfunction *before* the plyr package has been loaded. In addition, Student A \nhad two instances of script fragments, code which would not execute or which \nwould not produce the desired result (displayed below). The first instance \n(`plot(LengthAge$mean ~ LengthAge$Age)`) references a non-existent variable\n(`LengthAge$mean`). The second instance attempts to create a dataframe of \npreviously created objects, but the `Growth` column is not correctly created, as\nStudent A neglects to use the `c()` function to combine these objects into a \nvector. \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f6e940e7bb9e845a73b0\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f6e940e7bb9e845a73b0\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\"],[\"plot(LengthAge$mean ~ LengthAge$Age)\",\"x &lt;- data.frame(\\\"Age\\\" = 1:9, \\\"Growth\\\" = Weight1, Weight2, Weight3, Weight4, Weight5, Weight6, Weight7, Weight8, Weight9)\"],[\"creates scatterplot, selects variables using $\",\"create new dataframe, new columns, column containing data summaries\"],[\"references a non-existant variable (mean instead of meanL)\",\"script fragments -- incorrect dimensions for variable\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n      <th>Notes<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n</br> \n\n**A Note About Student's Script Files**\n\nBoth Student A and Student B interacted with R through R scripts created in \nRStudio. While R Markdown [@rmarkdown] documents existed at the time of their\nGLAS course, the instructor of the course did not demonstrate the use of these\ndynamic documents. Thus, these student's analysis copied and pasted their\nresults from RStudio into a Word file. \n\nAlthough it was noted that Student B used functions (e.g., `source()`, `load()`)\nto load functions and data into her R script, these statements used a mix of \nfull and relative paths to access these materials. This mix of full and relative\npaths also makes Student B's script limited in its reproducibility. It is, \nhowever, worth noting that at the time of their GLAS course, RStudio projects\ndid not exist. Thus, the methods \n\n### Summary\n\nViewing these differences through the lens of these student's computing\nexperiences, helps us understand potential reasons for *why* these differences \noccurred. As discussed in [Digging Deeper](digging-deeper.qmd), Student A entered \ngraduate school (and GLAS) with hardly any computing experiences. Student B, \nhowever, entered graduate school having numerous experiences programming in \nMatlab, and completed the Swirl tutorial [@swirl] before enrolling in GLAS.\n\nStudent B's prior programming experiences provided her with an appreciation for\nstructured programs, as well as an understanding of the importance of\nreproducible code. Due to her limited programming experiences, Student A's \nattention was pulled toward getting a working solution rather that writing \nreadable code, organizing her code, or ensuring her analysis was fully\nreproducible. \n\n## Efficiency / Inefficiency\n\n::: {.column-margin}\n![](images/efficient.png)\n:::\n\nEfficiency of student's code was determined based on a statement's \nadheres to the \"don't repeat yourself\" principle [@greg]. Student B's prior \nprogramming experiences allowed her to see the importance of writing \nefficient code, sourcing in functions she frequently used and utilizing \niteration for repeated operations (e.g., `apply()`). With her limited\nprogramming experiences, Student A was unfamiliar with this programming\npractice. Instead, Student A was focused on finding a working solution for the\ntask at hand. Thus, when a working solution was found, Student A would \ncopy, paste, and modify the code to suit a variety of situations. \n\n</br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-4dc4a447520511816c57\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4dc4a447520511816c57\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\"],[\"EarlyWeightAge &lt;- ddply(Early, ~Age, summarise, meanWE=mean(Weight, na.rm = T))\",\"EarlyLengthAge &lt;- ddply(Early, ~Age, summarise, meanLE = mean(ForkLength, na.rm = T))\",\"MidLengthAge &lt;- ddply(Mid, ~Age, summarise, meanLM = mean(ForkLength, na.rm = T))\",\"WeightChange &lt;- rep(NA, 9)\",\"library(plyr)\",\"Weight1 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 1], na.rm = TRUE)\",\"Length1 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 1], na.rm  = TRUE)\",\"Weight2 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 2], na.rm = TRUE)\",\"Length2 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 2], na.rm  = TRUE)\",\"Weight3 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 3], na.rm = TRUE)\",\"Length3 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 3], na.rm  = TRUE)\",\"Weight4 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 4], na.rm = TRUE)\",\"Length4 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 4], na.rm  = TRUE)\",\"Weight5 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 5], na.rm = TRUE)\",\"Length5 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 5], na.rm  = TRUE)\",\"Weight6 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 6], na.rm = TRUE)\",\"Length6 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 6], na.rm  = TRUE)\",\"Weight7 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 7], na.rm = TRUE)\",\"Length7 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 7], na.rm  = TRUE)\",\"Weight8 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 8], na.rm = TRUE)\",\"Length8 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 8], na.rm  = TRUE)\",\"Weight9 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 9], na.rm = TRUE)\",\"Length9 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 9], na.rm  = TRUE)\",\"source(\\\"./Gas_Functions.R\\\")\",\"likelihoods &lt;- apply(X = pMat, MARGIN = 1, FUN = nmle, t = timeD,  y = obsD, N15_NO3_O = fracDenD*(N15_NO3_O_D))\"],[\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"create variable\",\"load package\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"loading functions written in another R script\",\"creating a new dataframe, applying function over rows of existing dataframe, declare additional function arguments, name all arguments  \"],[\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n      <th>Student<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## Data Visualization\n\nDespite the considerable differences in Student A and Student B's workflow and\nprogramming efficiency, they had substantial similarities in the data\nvisualizations they produced. Both students primarily produced scatterplots, \noften including a third variable by coloring points. Both students would \nconsistently modify their axis labels, rotate their axis tick mark labels \n(`las`), and include a legend in their plot. Each of these similarities \narose from their experiences in the GLAS course, where these practices were \nmodeled by the instructor for the visualizations the class produced. \n\nThere are, however, notable differences within these similarities. Where Student\nA paired the `plot()` and `lines()` functions, Student B used the built-in\n`type` argument to produce a line plot. Additionally, Student B's \nscatterplot had more polished axis labels through her use of the `title()` \nfunction. Finally, although small in nature, each student used a different \nmethod to declare the legend position, with Student A specifying x and y\ncoordinates and Student B using the (\"bottomright\") string specification.\n\n</br> \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-128c5e8adc6c114b273f\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-128c5e8adc6c114b273f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\"],[\"EarlyWeightAge &lt;- ddply(Early, ~Age, summarise, meanWE=mean(Weight, na.rm = T))\",\"EarlyLengthAge &lt;- ddply(Early, ~Age, summarise, meanLE = mean(ForkLength, na.rm = T))\",\"MidLengthAge &lt;- ddply(Mid, ~Age, summarise, meanLM = mean(ForkLength, na.rm = T))\",\"WeightChange &lt;- rep(NA, 9)\",\"library(plyr)\",\"Weight1 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 1], na.rm = TRUE)\",\"Length1 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 1], na.rm  = TRUE)\",\"Weight2 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 2], na.rm = TRUE)\",\"Length2 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 2], na.rm  = TRUE)\",\"Weight3 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 3], na.rm = TRUE)\",\"Length3 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 3], na.rm  = TRUE)\",\"Weight4 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 4], na.rm = TRUE)\",\"Length4 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 4], na.rm  = TRUE)\",\"Weight5 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 5], na.rm = TRUE)\",\"Length5 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 5], na.rm  = TRUE)\",\"Weight6 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 6], na.rm = TRUE)\",\"Length6 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 6], na.rm  = TRUE)\",\"Weight7 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 7], na.rm = TRUE)\",\"Length7 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 7], na.rm  = TRUE)\",\"Weight8 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 8], na.rm = TRUE)\",\"Length8 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 8], na.rm  = TRUE)\",\"Weight9 &lt;- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 9], na.rm = TRUE)\",\"Length9 &lt;- mean(RPMA2GrowthSub$ForkLength[RPMA2GrowthSub$Age == 9], na.rm  = TRUE)\",\"source(\\\"./Gas_Functions.R\\\")\",\"likelihoods &lt;- apply(X = pMat, MARGIN = 1, FUN = nmle, t = timeD,  y = obsD, N15_NO3_O = fracDenD*(N15_NO3_O_D))\"],[\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"data summary (mean) or variable by groups of another variable, create a new dataframe\",\"create variable\",\"load package\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"select column with $, filter rows using [] and relational statement (==), calculate data summary\",\"loading functions written in another R script\",\"creating a new dataframe, applying function over rows of existing dataframe, declare additional function arguments, name all arguments  \"],[\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\",\"studentA\"]],\"container\":\"<table class=\\\"row-border stripe\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>R Code<\\/th>\\n      <th>Descriptive Code<\\/th>\\n      <th>Student<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.22/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}