{
  "hash": "0e103d1d2b90122f864a8b97e73ff350",
  "result": {
    "markdown": "---\ntitle: \"Step 4: Digging Deeper\"\npage-layout: full\nreference-location: margin\ncitation-location: margin\nbibliography: ref-1.bib\n---\n\n\nI purposefully excluded the words \"knowledge\" or \"understanding\" from the \ndefinitions of the themes that emerged from the data, because I cannot state\nthat a student \"understands\" or \"knows\" a concept solely based on their R code.\nAdditional information is absolutely necessary in order to make this type of\nstatement. \n\nTherefore, to better understand a student's conceptual understand of the code\nthey produced, I conducted interviews with each student. I asked both students\nto articulate for me the purpose of each line of code in their R script,\nfollowing up with additional clarifying questions if necessary. \n\nIn each section below I detail how these interviews informed my understanding \nof the themes outlined previously. Each section begins with a description of \neach student, providing the reader with an overview of each student's previous\ncomputing experiences prior to the graduate-level Applied Statistics (GLAS) I \ncourse. \n\n\n## Student A\n\n::: {.column-margin}\n![](images/alicia.png)\n:::\n\nThe spring of 2018 was Student A's first semester as a graduate student, \npursuing a master’s degree in Fisheries and Wildlife Management. Student A\nidentified as a Hispanic woman. She had completed a Bachelors in Ecology at a\nmedium sized research university in the western United States. Student A had\nminimal programming experiences during her bachelor’s degree, with experiences\nstemming through three main outlets. Helping a postdoc in her lab analyze data\nfrom a lab trip exposed her to R, completing the Calculus series for engineers\nexposed her to MatLab, and enrolling in an information technology course exposed\nher to Python and Java. In her first semester as a graduate student, Student A\nenrolled in GLAS, at the recommendation of her adviser. \n\n\n### Workflow\n\nSomething I noticed initially when reading through Student A's R script was the\nabsence of any code importing the dataset(s) used throughout their analysis. \nThus, I asked Student A about their process of importing their data into R:\n\nAllison: \"How do you read your data into R?\"\nStudent A: \"I do import dataset.\"\nAllison: \"Ah, you use the \"Import Dataset\" button in the Enviornment tab to load \nyour dataset in?\" \nStudent A: \"Mhmm.\" \n\nThrough this conversation, I realized that Student A did not understand how to\nwrite code to import their dataset into R. Moreover, they had not recognized \nthe code associated with their \"Import Dataset\" process appeared in the console\nonce they pressed the \"Import\" button. \n\n### Reproducibility\n\nDirectly connected to the absence of code to importing the datasets, the name \nof a dataset indicated \"outliers\" had been removed (`PADataNoOutlier`), yet \nthere were no statements of code performing this data filtering process. Thus, \nI asked Student A how they had carried out this process:\n\n__Allison__: \"Right here, it appears that you have removed an outlier from the data,\nbut I don’t see any code related to this removal. How did you do that?\"   \n\n__Student A__: \"In Excel. I know there's `subset()`...that I could have subset it.\nBut I forgot how to do that and I was trying to crunch this out, so I just\nwanted to get the data out, so I just went into Excel and deleted that and then\nimported the data. \n\nThis was an eye opening exchange! First and foremost, I discovered that although\nStudent A had used the `subset()` function in their code, they were not\ncomfortable enough with the function to use it when removing an outlier from a\ndataset. This implies that, athough data filtering played a major role in\nStudent A's code, they did not have an understanding of *how* the `subset()` \nfunction could be applied in a scenario where more than one variable needed to \nbe considered for inclusion / exclusion criteria. \n\n### R Environment\n\nThe theme of R Environment manifested in Student A's code in two ways, (1) the\nuse of `with()` to temporarily attach a dataset when plotting, and (2) the \nabsence of the `data = ` argument when using `lm()`. As both processes require\nthe same step--selecting a column from a dataframe--I was intrigued why Student\nA exclusively used `with()` when creating data visualizations and the `$`\noperator when using `lm()`:\n\n__Allison__: \"So, I notice that you are using `with()` here---with your data, plot\nthese variables. But then here when you are fitting your model, you say fit the\nmodel of `data$something`. I'm wondering why you used `with()` when making plots\nand `$` when fitting your model.\"\n\n__Student A__: \"Yeah, and so that [pointing to `$` code] is what I think we\nlearned in class. I think we did talk about this, “Oh if you don’t want to do \n`$` and call the data every time, you can do it like that.\" \n\n__Allison__: \"Okay.\" \n\n__Student A__: \"Um, and then I started doing that [points to `with()` code], because I found\nthat online and I was like \"okay.\" And it wasn’t getting an error, I don’t know\nwhy I changed, but it wasn’t getting an error.\"\n\n__Allison__: \"I see.\" \n\n__Student A__: \"And then it worked, so then I just copied and pasted everything and kept\nworking with that.\"\n\nAnother interesting discovery! Student A was simply copying the behavior they \nhad learned in their GLAS course when using the `$` within the `lm()` function \nrather than utilizing the `data = ` argument. The use of `with()`, however, \nStudent A did not learn in class, but was gleaned from the internet. Their \nlitmus test for using the code was whether it returned an error, implying \nStudent A did not, in fact, understand the difference between these two methods \nfor extracting variables from a dataframe. \n\n### External Resources\n\nThis theme of Student A pulling solutions from external resources was found\nthroughout their interview. Asking clarifying details about Student A's use of \n`transform()`, I discovered they were unaware of the general purpose of the \nfunction*[*`transform()` converts its first argument to a data frame.]{.aside}\nand the existance of alternative methods for changing the datatype of a \nvariable in a dataframe.**[**For example, \n`RPMA2$Age <- as.integer(RPMA2Growth$Age)` would have coverted the `Age`\nvariable without the need to make a new dataframe.]{.aside}\n\nIt was clear from Student A's code they had used another student as a resource\n(`#Tanner's code/help`), however, it was unclear what portion of their code\nhad been influenced by Tanner. Conversing with Student A, I learned they had\ndiscovered a bruteforce method for calculating the mean of specific values from \none variable through Googling (`Weight1 <- mean(RPMA2GrowthSub$Weight[RPMA2GrowthSub$Age == 1], na.rm = TRUE)`). However, after talking with another graduate student about the\nprocess they were attempting to carry out, this student (Tanner) offered to send\nStudent A their code. Enter `ddply()`. Using this code, Student A was able to \nobtain the mean length / weight across a variety of ages, accomplishing in two \nlines what had previously taken them 18 lines.***[***Yet, these 18 lines\ncontinued to live in Student A's code even after she found a more efficient \nmethod.]{.aside}\n\n\n# Student B \n\n::: {.column-margin}\n![](images/ellie.png)\n:::\n\nThe spring of 2018 was Student B's second semester as a graduate student,\npursuing an interdisciplinary doctorate in Ecology and Environmental Sciences.\nStudent B identified as White and a woman. She had completed a bachelor's degree\nin engineering at a medium sized research university in the Midwestern United\nStates. During her undergraduate degree, Student B's coursework entailed\nextensive programming experiences in MatLab, multiple courses in GIS. Student B\nalso had experiences working with relational databases using Access through a\npost-baccalaureate internship. During her first semester, Student B completed\nthe \"R programming\" module in **swirl**, at the recommendation of her adviser,\ndue to the extensive amount of computational work done in their lab. In her\nsecond semester, Student B enrolled in GLAS I, at the recommendation of her\nadviser. \n\n### Workflow\n\nReading through Student B's code, I noticed straight away that she had a \nrobust workflow for carrying out analysis. First, cleaning her workspace \n(`rm(list = ls())`)*[*Jenny Bryan has some great advice on why not to use `setwd()`\nand `rm(list = ls())` at the top of R scripts\n[here](https://www.tidyverse.org/blog/2017/12/workflow-vs-script).]{.aside}, then\nsourcing in functions from an external R script. As the GLAS course did not\nteach this type of process, I asked Student B for additional details about these\nstatements of code:\n\n__Allison__: \"What is the purpose of the first line of your R script?\"\n\n__Student B__: \"That clears the work space. That's something you see in a lot \nof people's R code.\"\n\n__Allison__: \"What is the nature of this file you are sourcing in?\"\n\n__Student B__: \"So, these are just like utility functions that are more generic\nthat could be used for different kinds of analysis.\"\n\nThis conversation led me to believe that Student B understands the importance\nof not repeating yourself by reusing code she has already written. However, \nin terms of workflow, there still existed some problematic elements of Student\nA's code. The mix of full paths and relative paths would make it rather \ndifficult to share this script with another person.**[**It is important to note\nthat RStudio projects did not exist when these students were completing their\nproject.]{.aside}\n\n### Efficiency\n\nI was also intrigued by Student A's use of `apply()` to calculate the likelihood\nacross a matrix of possible values, as this repeated process was not explicitly\ntaught in the GLAS course. Through my conversation with Student B, it became \nclear that their previous programming experiences during their undergrad opened\nthe door for them to begin thinking about \"optimizing\" their code: \n\n__Student B__: \"Well, I was an engineering undergrad, so I had some Matlab and\nI remember we had to take an Intro to Matlab class freshman year and I remember\nbeing so frustrated during that class. It just didn’t make sense, like this\ncoding stuff there is a jargon associated with it. I just remember being really\nfrustrated and towards the end kinda getting it. And then I had to use Matlab\nnot like a ton, but a little bit throughout my undergrad, so I got some practice\nwriting functions and for-loops. But I didn’t necessarily start to think about,\nand this is a bad example of it, but I didn’t start to think about optimizing\nmy code or I didn’t even know what object-oriented programming was until I\nstarted working with [my advisor].\"\n\n### Data Wrangling\n\nI had also noticed that throughout Student B's code she used a variety of \nmethods for filtering data, not sticking with one method for every instance. \nSometimes Student B would use some combination of relational and / or logical\nstatements and bracketing to filter observations: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngas <- gas[!(substr(gas$sampleID,3,3) %in% c(\"b\",\"c\")), ]\n```\n:::\n\n\nOther times, Student B would use the `subset()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntimeD <- (subset(gas, gas$carboy == \"D\"))$days```\n```\n:::\n\nAnd sometimes, Student B would combine both bracketing and `subset()` in the \nsame statement:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN15_NO3_O_D <- 40*((carboys[carboys$CarboyID == \"D\",]$EstN15NO3) + (0.7*RstN/(1 +RstN)))/(subset(gas, gas$carboy == \"D\")$Ar[1])\n```\n:::\n\n\nWhen I discussed these different methods with Student B, they were seemingly \nunphased about using different data filtering methods throughout their code. \nMoreover, she provided sophisticated descriptions of how each data filtering \nprocess was carried out by R. Seemingly, Student B's prior programming\nexperiences allowed her to access a more robust understanding of R, making her\nmore agile at using a variety of methods to filter observations and select \nvariables. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}